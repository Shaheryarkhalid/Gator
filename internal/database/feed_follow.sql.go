// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feeds_follow as (
    INSERT INTO feed_follows(id, created_at, updated_at, user_id , feed_id)VALUES($1, $2, $3, $4, $5) returning id, created_at, updated_at, user_id, feed_id
) SELECT inserted_feeds_follow.id, inserted_feeds_follow.created_at, inserted_feeds_follow.updated_at, inserted_feeds_follow.user_id, inserted_feeds_follow.feed_id, users.name as user_name, feeds.name as feed_name from inserted_feeds_follow join users on inserted_feeds_follow.user_id = users.id join feeds on inserted_feeds_follow.feed_id = feeds.id LIMIT 1
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowById = `-- name: DeleteFeedFollowById :exec
DELETE from feed_follows where id = $1
`

func (q *Queries) DeleteFeedFollowById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowById, id)
	return err
}

const getFeedFollowByFeedIdAndUserId = `-- name: GetFeedFollowByFeedIdAndUserId :one
SELECT id, created_at, updated_at, user_id, feed_id from feed_follows where feed_id = $1 and user_id = $2 LIMIT 1
`

type GetFeedFollowByFeedIdAndUserIdParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetFeedFollowByFeedIdAndUserId(ctx context.Context, arg GetFeedFollowByFeedIdAndUserIdParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowByFeedIdAndUserId, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT  feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id, users.name as user_name, feeds.name as feed_name from feed_follows  join users on feed_follows.user_id = users.id join feeds on feed_follows.feed_id = feeds.id where feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
